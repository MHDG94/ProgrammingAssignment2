cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
j<-x$getInverse()
if(!is.null(j)){
message("getting cached data")
return(j)
}
mat<-x$get()
j<-solve(mat,...)
x$setInverse(j)
j
}
makeCacheMatrix <- function(x = matrix()) {
j<-NULL
set<-function(y){
x<<-y
j<<-NULL
}
get<-function()x
setInverse<-function(inverse)j<<-inverse
getInverse<-function()j
list (set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## CacheSolve consists of getInverse and setInverse
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
j<-x$getInverse()
if(!is.null(j)){
message("getting cached data")
return(j)
}
mat<-x$get()
j<-solve(mat,...)
x$setInverse(j)
j
}
f<-makeCacheMatrix(matrix(1:8),2,4)
f<-makeCacheMatrix(matrix(1:8,2,4))
f$get()
f$getinv()
f$getInverse()
f$getInverse()
f$getInverse(matrix(1:8,2,4)))
f$setInverse()
f$get()
f$getInverse()
f$getInverse()
f<-makeCacheMatrix(matrix(1:8,2,4))
f$set()
f$set(y = 1:8)
f$set()
B <- matrix (c(1,2,3,4),2,2)
B <- makeCacheMatrix(B)
f$get()
f<-makeCacheMatrix(matrix(1:8),2,4)
j<-NULL
set<-function(y){
x<<-y
j<<-NULL
}
makeCacheMatrix <- function(x = matrix()) {
j<-NULL
set<-function(y){
x<<-y
j<<-NULL
}
get<-function()x
setInverse<-function(inverse)j<<-inverse
getInverse<-function()j
list (set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## CacheSolve consists of getInverse and setInverse
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
j<-x$getInverse()
if(!is.null(j)){
message("getting cached data")
return(j)
}
mat<-x$get()
j<-solve(mat,...)
x$setInverse(j)
j
}
f<-makeCacheMatrix(matrix(1:8,2,4))
f$get()
f<-cacheSolve()
f<-cacheSolve(x)
f<-cacheSolve()x
f<-makeCacheMatrix(matrix(1:8,2,4))
f$get()
f$getInverse()
# reset value with a new vector
f$get(30:50)
